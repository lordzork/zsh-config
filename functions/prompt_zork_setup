prompt_zork_help()
{
    cat <<EOF
We honor the following settings from the file $ZDOTDIR/.promptrc:

   ## the color of parentheses
   color_paren=blue

   ## the color of lables
   color_dark=white

   ## the color of variable data
   color_lite=WHITE

   ## the color of the user and host names
   color_userhost=BLUE

   ## the following should be left empty to disable features
   ##
   ## show a count of regular vs. hidden directories
   show_dirs=yes

   ## show a count of regular vs. hidden files
   show_files=yes

   ## show the number of the terminal device
   show_tty=yes

   ## show the command number/exit status of last command
   show_commands=yes

   ## use the short hostname instead of the fqdn
   show_shorthost=yes

   ## use military time
   clock=24
EOF
}

prompt_zork_set_colors()
{

    case $2 in 
	BLACK|RED|GREEN|YELLOW|BLUE|MAGENTA|CYAN|WHITE)
	    clr[$1]="%b%B%F{${(L)2}}"
	    ;;
	black|red|green|yellow|blue|magenta|cyan|white)
	    clr[$1]="%b%F{$2}"
	    ;;
    esac
}

prompt_zork_parse_args()
{
    while [ -n "$*" ]; do

	case $1 in
	    -p|--paren)
		set_colors paren $2; shift
		;;
	    -d|--dark)
		set_colors dark $2; shift
		;;
	    -l|--lite)
		set_colors lite $2; shift
		;;
	    -u|--userhost)
		set_colors userhost $2; shift
		;;
	    -24)
		hr="%H"
		;;
	    --date)
		show_date=yes
		;;
	    --clock)
		show_clock=yes
		;;
	    --files)
		show_files=yes
		;;
	    --dirs)
		show_dirs=yes
		;;
	    --tty)
		show_tty=yes
		;;
	    --com)
		show_com=yes
		;;
	    --shorthost)
		host="%m"
	esac
	shift
    done
}

prompt_zork_ls_count() 
{
    local -a f hf d hd

    f=( *(.N) )
    hf=( .*(.N) )
    d=( *(/N) )
    hd=( .*(/N) )

    psvar[5]=${#f}
    psvar[6]=${#hf}
    psvar[7]=${#d}
    psvar[8]=${#hd}
}

prompt_zork_git_func()
{
    [ -d "$PWD/.git" ] || return

    local branch=${$(git branch | grep \* | cut -d' ' -f2):-UNNAMED}

    psvar[9]=" [ git:$branch ]"

    case $(git --no-pager status) in
        *"nothing to commit"*)
            psvar[2]=" git$lp$clr[lite]$branch$rp"
            ;;
	*"not updated"*)
            psvar[2]=" git$lp$clr[git_dirty]$branch$rp"
	    ;;
        *"Untracked files"*)
	    psvar[2]="git$lp$clr[git_untracked]$branch$rp"
	    ;;
	*"Changes to be committed"*)
	    psvar[2]="git$lp$clr[git_commits]$branch$rp"
    esac
}

prompt_zork_is_console()
{
    case $TERM in
	xterm*|*rxvt*|Eterm*|cygwin*)
	    return 1 ;;
	*)
	    return 0
    esac
}

prompt_zork_preexec()
{
    prompt_zork_is_console && return
    titlebar_length=${TB_LENGTH:-$titlebar_length}
    case $1 in
        %*)
	    cmd=%%$1:gs/%//
	    ;;
        *)      
	    cmd="$(echo $1 | tr \\n " ")"
    esac

    print -Pn "%{\e]0;[ $host ] [ %n ] [ %D{$hr}:%D{%M}: %$titlebar_length>...>% $cmd%>> ]\a%}"
}

prompt_zork_precmd()
{
    unset psvar
    
    prompt_zork_git_func
    prompt_zork_ls_count
 
    local jobs=
    local j=${(Mw)#jobstates#suspended:}

    if [ $j -gt 0 ]; then
	jobs=" [ $j+ ]"
	psvar[1]=( " $j+" )
    fi

    prompt_zork_is_console || print -Pn "%{\e]0;[ $host ] [ %n ] [ %30<...<%2c%<< ]%9v [ %h:%l ]$jobs\a%}"
}

prompt_zork_setup()
{
    setopt promptsubst

    typeset -Ag clr    
    if [ "$UID" = 0 ]; then
	clr[paren]=%B%F{blue}
	clr[dark]=%F{white}
	clr[lite]=%B%F{white}
	clr[userhost]=%B%F{red}
    else
	clr[paren]=%F{cyan}
	clr[dark]=%B%F{black}
	clr[lite]=%F{white}
	clr[userhost]=%B%F{cyan}
    fi

    clr[git_untracked]="%F{yellow}"
    clr[git_dirty]="%B%F{red}"
    clr[git_commits]="%F{magenta}"

    ## these variables can't be local because 
    ## precmd() and preexec() need them
    titlebar_length=50
    hr=%I
    host=%M

    local show_date=1
    local show_clock=1
    local show_tty=1
    local show_commands=1
    local show_files=1
    local show_dirs=1

    local str_clock=lc
    local str_date=d
    local str_com=com
    local str_git=git
    local str_dir=dirs
    local str_file=files
    local config=$ZDOTDIR/.promptrc

    ## source user config
    . $config >/dev/null 2>&1

    ## set user colors
    local p
    for p in paren dark lite userhost; do
	prompt_zork_set_colors $p $(eval echo $`eval echo color_\\$p`)
	prompt_zork_set_colors $p $(eval echo $`eval echo clr_\\$p`)

        #local arg=${!color_$p}
	#set_colors $p $arg
    done

    rs="%b%f%k"
    colon="$clr[paren]:$clr[lite]"
    lp="$clr[paren]($clr[lite]$rs"
    rp="$clr[paren])$rs"
    local lb="$rs$clr[paren]["
    local rb="$clr[paren]]$rs"
    local slash="$rs$clr[paren]/$clr[lite]"

    ## set user variables
    [ "$show_shorthost" ] && host=%m
    [ "$clock" = 24 ]  && hr=%H

    [ "$show_date" ] && 
    local ps_date=" $clr[dark]$str_date$lp%D{%m}$slash%D{%d}$slash%D{%y}$rp"
    [ "$show_clock" ] && 
    local ps_clock=" $clr[dark]$str_clock$lp%D{$hr}$colon%D{%M}$colon%D{%S}$rp"
    [ "$show_files" ] && 
    local ps_file=" $clr[dark]$str_file$lp%5v$slash%6v$rp"
    [ "$show_dirs" ] && 
    local ps_dir=" $clr[dark]$str_dir$lp%7v$slash%8v$rp"
    if [ "$show_tty" ]; then
	if prompt_zork_is_console; then
	    local str_tty=tty
	    local tty_num=$TTY:t
	else
	    local str_tty=$(echo $TTY | cut -d'/' -f3)
	    local tty_num=$TTY:t
	fi
	local ps_tty=" $clr[dark]$str_tty$lp$tty_num$rp"
    fi
    [ "$show_commands" ] && 
    local ps_com=" $clr[dark]$str_com$lp$clr[lite]%h$slash%?$rp"
    
    local ps_userhost="$clr[userhost]%n$clr[paren]@$clr[userhost]$host"

    local ps_wdir="$lp$clr[lite]%45<...<%~%<<$rp$clr[dark]"

    local ps_line1="$lb$ps_date$ps_clock$ps_file$ps_dir$ps_tty$ps_com$clr[lite]%1v$clr[dark]"$'${psvar[2]}'" $rb"
    local ps_line2="$lb $ps_userhost$ps_wdir $rb"
    local ps_line3=" $clr[userhost]%#$clr[dark]-$clr[paren]>$rs"

    PS1="
${ps_line1}
${ps_line2}
${ps_line3} "
    PS2=" $clr[userhost]%#$clr[dark] %_$clr[dark]-$clr[paren]>$rs "
    PS3=
    RPROMPT=

    add-zsh-hook precmd prompt_zork_precmd
    add-zsh-hook preexec prompt_zork_preexec
}

prompt_zork_setup "$@"
